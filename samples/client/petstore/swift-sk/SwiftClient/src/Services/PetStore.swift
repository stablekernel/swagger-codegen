//
// pet.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol PetStoreProtocol {
    var gateway: Gateway {get}
    func addPet(body: Pet, completion: @escaping (RequestResult<Void>) -> Void)
    func deletePet(petId: Int64, apiKey: String?, completion: @escaping (RequestResult<Void>) -> Void)
    func findPetsByStatus(status: [String], completion: @escaping (RequestResult<[Pet]>) -> Void)
    func findPetsByTags(tags: [String], completion: @escaping (RequestResult<[Pet]>) -> Void)
    func getPetById(petId: Int64, completion: @escaping (RequestResult<Pet>) -> Void)
    func updatePet(body: Pet, completion: @escaping (RequestResult<Void>) -> Void)
    func updatePetWithForm(petId: Int64, name: String?, status: String?, completion: @escaping (RequestResult<Void>) -> Void)
    func uploadFile(petId: Int64, additionalMetadata: String?, file: URL?, completion: @escaping (RequestResult<ApiResponse>) -> Void)
}


open class PetStore: PetStoreProtocol {
    var gateway: Gateway

    init(_ gateway: Gateway) {
    self.gateway = gateway
    }

    m
    /**
     Add a new pet to the store
     
     - parameter body: (body) Pet object that needs to be added to the store 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func addPet(body: Pet, completion: @escaping (RequestResult<Void>) -> Void) {
        let path = "/pet"
        let request = SuccessRequest(gateway: gateway, identifiers: [path])
        request.method = .post
        request.body.encode(body)
        request.execute(completion: completion)
    }

    m
m
    /**
     Deletes a pet
     
     - parameter petId: (path) Pet id to delete 
     - parameter apiKey: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func deletePet(petId: Int64, apiKey: String? = nil, completion: @escaping (RequestResult<Void>) -> Void) {
        var path = "/pet/{petId}"
            path = path.replacingOccurrences(of: "{petId}", with: "\(petId)", options: .literal, range: nil)
        let request = SuccessRequest(gateway: gateway, identifiers: [path])
        request.method = .delete
        request.execute(completion: completion)
    }

    m
    /**
     * enum for parameter status
     */
    public enum Status_findPetsByStatus: String { 
        case available = "available"
        case pending = "pending"
        case sold = "sold"
    }

    /**
     Finds Pets by status
     
     - parameter status: (query) Status values that need to be considered for filter 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func findPetsByStatus(status: [String], completion: @escaping (RequestResult<[Pet]>) -> Void) {
        let path = "/pet/findByStatus"
        let request = ResourceRequest<[Pet]>(gateway: gateway, identifiers: [path])
        request.method = .get
        request.execute(completion: completion)
    }

    m
    /**
     Finds Pets by tags
     
     - parameter tags: (query) Tags to filter by 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func findPetsByTags(tags: [String], completion: @escaping (RequestResult<[Pet]>) -> Void) {
        let path = "/pet/findByTags"
        let request = ResourceRequest<[Pet]>(gateway: gateway, identifiers: [path])
        request.method = .get
        request.execute(completion: completion)
    }

    m
    /**
     Find pet by ID
     
     - parameter petId: (path) ID of pet to return 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func getPetById(petId: Int64, completion: @escaping (RequestResult<Pet>) -> Void) {
        var path = "/pet/{petId}"
            path = path.replacingOccurrences(of: "{petId}", with: "\(petId)", options: .literal, range: nil)
        let request = ResourceRequest<Pet>(gateway: gateway, identifiers: [path])
        request.method = .get
        request.execute(completion: completion)
    }

    m
    /**
     Update an existing pet
     
     - parameter body: (body) Pet object that needs to be added to the store 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func updatePet(body: Pet, completion: @escaping (RequestResult<Void>) -> Void) {
        let path = "/pet"
        let request = SuccessRequest(gateway: gateway, identifiers: [path])
        request.method = .put
        request.body.encode(body)
        request.execute(completion: completion)
    }

    m
m
m
    /**
     Updates a pet in the store with form data
     
     - parameter petId: (path) ID of pet that needs to be updated 
     - parameter name: (form) Updated name of the pet (optional)
     - parameter status: (form) Updated status of the pet (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func updatePetWithForm(petId: Int64, name: String? = nil, status: String? = nil, completion: @escaping (RequestResult<Void>) -> Void) {
        var path = "/pet/{petId}"
            path = path.replacingOccurrences(of: "{petId}", with: "\(petId)", options: .literal, range: nil)
        let request = SuccessRequest(gateway: gateway, identifiers: [path])
        request.method = .post
        request.execute(completion: completion)
    }

    m
m
m
    /**
     uploads an image
     
     - parameter petId: (path) ID of pet to update 
     - parameter additionalMetadata: (form) Additional data to pass to server (optional)
     - parameter file: (form) file to upload (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func uploadFile(petId: Int64, additionalMetadata: String? = nil, file: URL? = nil, completion: @escaping (RequestResult<ApiResponse>) -> Void) {
        var path = "/pet/{petId}/uploadImage"
            path = path.replacingOccurrences(of: "{petId}", with: "\(petId)", options: .literal, range: nil)
        let request = ResourceRequest<ApiResponse>(gateway: gateway, identifiers: [path])
        request.method = .post
        request.execute(completion: completion)
    }

}
