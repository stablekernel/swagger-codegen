//
// store.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol StoreStoreProtocol {
    var gateway: Gateway {get}
    func deleteOrder(orderId: Int64, completion: @escaping (RequestResult<Void>) -> Void)
    func getInventory(completion: @escaping (RequestResult<[String:Int]>) -> Void)
    func getOrderById(orderId: Int64, completion: @escaping (RequestResult<Order>) -> Void)
    func placeOrder(body: Order, completion: @escaping (RequestResult<Order>) -> Void)
}


open class StoreStore: StoreStoreProtocol {
    var gateway: Gateway

    init(_ gateway: Gateway) {
    self.gateway = gateway
    }

    m
    /**
     Delete purchase order by ID
     
     - parameter orderId: (path) ID of the order that needs to be deleted 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func deleteOrder(orderId: Int64, completion: @escaping (RequestResult<Void>) -> Void) {
        var path = "/store/order/{orderId}"
            path = path.replacingOccurrences(of: "{orderId}", with: "\(orderId)", options: .literal, range: nil)
        let request = SuccessRequest(gateway: gateway, identifiers: [path])
        request.method = .delete
        request.execute(completion: completion)
    }

        /**
     Returns pet inventories by status
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func getInventory(completion: @escaping (RequestResult<[String:Int]>) -> Void) {
        let path = "/store/inventory"
        let request = ResourceRequest<[String:Int]>(gateway: gateway, identifiers: [path])
        request.method = .get
        request.execute(completion: completion)
    }

    m
    /**
     Find purchase order by ID
     
     - parameter orderId: (path) ID of pet that needs to be fetched 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func getOrderById(orderId: Int64, completion: @escaping (RequestResult<Order>) -> Void) {
        var path = "/store/order/{orderId}"
            path = path.replacingOccurrences(of: "{orderId}", with: "\(orderId)", options: .literal, range: nil)
        let request = ResourceRequest<Order>(gateway: gateway, identifiers: [path])
        request.method = .get
        request.execute(completion: completion)
    }

    m
    /**
     Place an order for a pet
     
     - parameter body: (body) order placed for purchasing the pet 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func placeOrder(body: Order, completion: @escaping (RequestResult<Order>) -> Void) {
        let path = "/store/order"
        let request = ResourceRequest<Order>(gateway: gateway, identifiers: [path])
        request.method = .post
        request.body.encode(body)
        request.execute(completion: completion)
    }

}
