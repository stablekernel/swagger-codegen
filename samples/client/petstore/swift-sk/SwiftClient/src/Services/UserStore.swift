//
// user.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol UserStoreProtocol {
    var gateway: Gateway {get}
    func createUser(body: User, completion: @escaping (RequestResult<Void>) -> Void)
    func createUsersWithArrayInput(body: [User], completion: @escaping (RequestResult<Void>) -> Void)
    func createUsersWithListInput(body: [User], completion: @escaping (RequestResult<Void>) -> Void)
    func deleteUser(username: String, completion: @escaping (RequestResult<Void>) -> Void)
    func getUserByName(username: String, completion: @escaping (RequestResult<User>) -> Void)
    func loginUser(username: String, password: String, completion: @escaping (RequestResult<String>) -> Void)
    func logoutUser(completion: @escaping (RequestResult<Void>) -> Void)
    func updateUser(username: String, body: User, completion: @escaping (RequestResult<Void>) -> Void)
}


open class UserStore: UserStoreProtocol {
    var gateway: Gateway

    init(_ gateway: Gateway) {
    self.gateway = gateway
    }

    m
    /**
     Create user
     
     - parameter body: (body) Created user object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func createUser(body: User, completion: @escaping (RequestResult<Void>) -> Void) {
        let path = "/user"
        let request = SuccessRequest(gateway: gateway, identifiers: [path])
        request.method = .post
        request.body.encode(body)
        request.execute(completion: completion)
    }

    m
    /**
     Creates list of users with given input array
     
     - parameter body: (body) List of user object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func createUsersWithArrayInput(body: [User], completion: @escaping (RequestResult<Void>) -> Void) {
        let path = "/user/createWithArray"
        let request = SuccessRequest(gateway: gateway, identifiers: [path])
        request.method = .post
        request.body.encode(body)
        request.execute(completion: completion)
    }

    m
    /**
     Creates list of users with given input array
     
     - parameter body: (body) List of user object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func createUsersWithListInput(body: [User], completion: @escaping (RequestResult<Void>) -> Void) {
        let path = "/user/createWithList"
        let request = SuccessRequest(gateway: gateway, identifiers: [path])
        request.method = .post
        request.body.encode(body)
        request.execute(completion: completion)
    }

    m
    /**
     Delete user
     
     - parameter username: (path) The name that needs to be deleted 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func deleteUser(username: String, completion: @escaping (RequestResult<Void>) -> Void) {
        var path = "/user/{username}"
            path = path.replacingOccurrences(of: "{username}", with: "\(username)", options: .literal, range: nil)
        let request = SuccessRequest(gateway: gateway, identifiers: [path])
        request.method = .delete
        request.execute(completion: completion)
    }

    m
    /**
     Get user by user name
     
     - parameter username: (path) The name that needs to be fetched. Use user1 for testing.  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func getUserByName(username: String, completion: @escaping (RequestResult<User>) -> Void) {
        var path = "/user/{username}"
            path = path.replacingOccurrences(of: "{username}", with: "\(username)", options: .literal, range: nil)
        let request = ResourceRequest<User>(gateway: gateway, identifiers: [path])
        request.method = .get
        request.execute(completion: completion)
    }

    m
m
    /**
     Logs user into the system
     
     - parameter username: (query) The user name for login 
     - parameter password: (query) The password for login in clear text 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func loginUser(username: String, password: String, completion: @escaping (RequestResult<String>) -> Void) {
        let path = "/user/login"
        let request = ResourceRequest<String>(gateway: gateway, identifiers: [path])
        request.method = .get
        request.execute(completion: completion)
    }

        /**
     Logs out current logged in user session
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func logoutUser(completion: @escaping (RequestResult<Void>) -> Void) {
        let path = "/user/logout"
        let request = SuccessRequest(gateway: gateway, identifiers: [path])
        request.method = .get
        request.execute(completion: completion)
    }

    m
m
    /**
     Updated user
     
     - parameter username: (path) name that need to be updated 
     - parameter body: (body) Updated user object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func updateUser(username: String, body: User, completion: @escaping (RequestResult<Void>) -> Void) {
        var path = "/user/{username}"
            path = path.replacingOccurrences(of: "{username}", with: "\(username)", options: .literal, range: nil)
        let request = SuccessRequest(gateway: gateway, identifiers: [path])
        request.method = .put
        request.body.encode(body)
        request.execute(completion: completion)
    }

}
